# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Item {
  id: ID!
  label: String
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  complete: Boolean
  list: List
  project: Project
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ItemWhereUniqueInput {
  id: ID
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  id: IDFilter
  label: StringFilter
  sortOrder: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  complete: BooleanFilter
  list: ListWhereInput
  project: ProjectWhereInput
  tags: TagManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ItemOrderByInput {
  id: OrderDirection
  label: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  complete: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ItemUpdateInput {
  label: String
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  complete: Boolean
  list: ListRelateToOneForUpdateInput
  project: ProjectRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input ListRelateToOneForUpdateInput {
  create: ListCreateInput
  connect: ListWhereUniqueInput
  disconnect: Boolean
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ItemUpdateArgs {
  where: ItemWhereUniqueInput!
  data: ItemUpdateInput!
}

input ItemCreateInput {
  label: String
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  complete: Boolean
  list: ListRelateToOneForCreateInput
  project: ProjectRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input ListRelateToOneForCreateInput {
  create: ListCreateInput
  connect: ListWhereUniqueInput
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type List {
  id: ID!
  label: String
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  items(where: ItemWhereInput! = {}, orderBy: [ItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ItemWhereUniqueInput): [Item!]
  itemsCount(where: ItemWhereInput! = {}): Int
}

input ListWhereUniqueInput {
  id: ID
}

input ListWhereInput {
  AND: [ListWhereInput!]
  OR: [ListWhereInput!]
  NOT: [ListWhereInput!]
  id: IDFilter
  label: StringFilter
  sortOrder: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  items: ItemManyRelationFilter
}

input ItemManyRelationFilter {
  every: ItemWhereInput
  some: ItemWhereInput
  none: ItemWhereInput
}

input ListOrderByInput {
  id: OrderDirection
  label: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ListUpdateInput {
  label: String
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  items: ItemRelateToManyForUpdateInput
}

input ItemRelateToManyForUpdateInput {
  disconnect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
}

input ListUpdateArgs {
  where: ListWhereUniqueInput!
  data: ListUpdateInput!
}

input ListCreateInput {
  label: String
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  items: ItemRelateToManyForCreateInput
}

input ItemRelateToManyForCreateInput {
  create: [ItemCreateInput!]
  connect: [ItemWhereUniqueInput!]
}

type Project {
  id: ID!
  label: String
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  items(where: ItemWhereInput! = {}, orderBy: [ItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ItemWhereUniqueInput): [Item!]
  itemsCount(where: ItemWhereInput! = {}): Int
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  label: StringFilter
  sortOrder: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  items: ItemManyRelationFilter
}

input ProjectOrderByInput {
  id: OrderDirection
  label: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProjectUpdateInput {
  label: String
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  items: ItemRelateToManyForUpdateInput
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  label: String
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  items: ItemRelateToManyForCreateInput
}

type Tag {
  id: ID!
  label: String
  createdAt: DateTime
  updatedAt: DateTime
  items(where: ItemWhereInput! = {}, orderBy: [ItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ItemWhereUniqueInput): [Item!]
  itemsCount(where: ItemWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  label: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  items: ItemManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  label: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  label: String
  createdAt: DateTime
  updatedAt: DateTime
  items: ItemRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  label: String
  createdAt: DateTime
  updatedAt: DateTime
  items: ItemRelateToManyForCreateInput
}

type User {
  id: ID!
  name: String
  about: String
  createdAt: DateTime
}

input UserWhereUniqueInput {
  id: ID
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  about: StringFilter
  createdAt: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  about: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  about: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  about: String
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createItem(data: ItemCreateInput!): Item
  createItems(data: [ItemCreateInput!]!): [Item]
  updateItem(where: ItemWhereUniqueInput!, data: ItemUpdateInput!): Item
  updateItems(data: [ItemUpdateArgs!]!): [Item]
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteItems(where: [ItemWhereUniqueInput!]!): [Item]
  createList(data: ListCreateInput!): List
  createLists(data: [ListCreateInput!]!): [List]
  updateList(where: ListWhereUniqueInput!, data: ListUpdateInput!): List
  updateLists(data: [ListUpdateArgs!]!): [List]
  deleteList(where: ListWhereUniqueInput!): List
  deleteLists(where: [ListWhereUniqueInput!]!): [List]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
}

type Query {
  items(where: ItemWhereInput! = {}, orderBy: [ItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ItemWhereUniqueInput): [Item!]
  item(where: ItemWhereUniqueInput!): Item
  itemsCount(where: ItemWhereInput! = {}): Int
  lists(where: ListWhereInput! = {}, orderBy: [ListOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ListWhereUniqueInput): [List!]
  list(where: ListWhereUniqueInput!): List
  listsCount(where: ListWhereInput! = {}): Int
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
